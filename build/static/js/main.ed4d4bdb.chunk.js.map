{"version":3,"sources":["components/HeaderComponent.js","pages/HomePage.js","components/LoadingComponent.js","pages/WeatherPage.js","redux/ActionTypes.js","redux/ActionCreators.js","components/MainComponent.js","redux/Forecast.js","App.js","redux/configureStore.js","reportWebVitals.js","index.js"],"names":["HeaderComponent","useState","phoneMenu","setPhoneMenu","Container","fluid","Row","Col","md","xs","href","src","className","to","onClick","HomePage","props","city","setCity","country","setCountry","ref","usePlacesWidget","apiKey","onPlaceSelected","place","i","address_components","length","j","types","long_name","Geocode","setApiKey","placeholder","defaultValue","style","background","navigator","geolocation","getCurrentPosition","position","fromLatLng","coords","latitude","longitude","then","response","results","current","value","error","console","width","LoadingComponent","WeatherPage","tmp","WLocation","split","useEffect","forecast","isLoading","errMess","log","get_forecast","temp_c","wind_kph","condition","text","vis_km","forecastday","map","item","id","alt","date","maxHeight","day","icon","maxtemp_c","mintemp_c","astro","sunrise","sunset","GETTING_FORECAST","GET_FORECAST_ERROR","GET_FORECAST_SUCCESS","getting_forecast","type","ActionTypes","get_forecast_success","data","payload","get_forecast_error","err","withRouter","connect","state","dispatch","setWeather","fetch","ok","Error","status","statusText","json","catch","path","component","match","params","Forecast","action","store","createStore","combineReducers","applyMiddleware","thunk","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ed4d4bdb.chunk.js","sourcesContent":["import {Col, Container, Row} from \"reactstrap\";\nimport {NavLink} from \"react-router-dom\";\nimport {AiOutlineMenu} from \"react-icons/all\";\nimport {useState} from 'react';\n\nconst HeaderComponent = () => {\n    const [phoneMenu, setPhoneMenu] = useState(false);\n    return(\n        <Container fluid>\n            <Row>\n                <Col md={4} xs={6}>\n                    <a href='/'><img src='/images/Logo-Test.png' className='w-100 p-3'/></a>\n                </Col>\n                <Col md={8} xs={6}>\n                    <div className='d-none d-md-flex h-100 w-100 justify-content-end'>\n                        <NavLink className='align-self-center p-3 link border-animation' to='/home'>Home</NavLink>\n                        <NavLink className='align-self-center p-3 link border-animation' to='/home'>Home</NavLink>\n                        <NavLink className='align-self-center p-3 link border-animation' to='/home'>Home</NavLink>\n                    </div>\n                    <div className='d-flex d-md-none h-100 w-100 justify-content-end px-5'>\n                        <AiOutlineMenu onClick={() => setPhoneMenu(!phoneMenu)} className='align-self-center header-phone-menu'/>\n                    </div>\n                </Col>\n            </Row>\n            <Row className={phoneMenu ? 'text-center' : 'd-none'}>\n                <Col xs={12}>\n                    <NavLink className='align-self-center p-3 w-100 link' to='/home'>Home</NavLink>\n                </Col>\n                <Col xs={12}>\n                    <NavLink className='align-self-center p-3 w-100 link' to='/home'>Home</NavLink>\n                </Col>\n                <Col xs={12}>\n                    <NavLink className='align-self-center p-3 w-100 link' to='/home'>Home</NavLink>\n                </Col>\n            </Row>\n        </Container>\n    )\n}\n\nexport default HeaderComponent;","import {Col, Container, Row} from \"reactstrap\";\nimport {useState} from 'react';\nimport { usePlacesWidget } from \"react-google-autocomplete\";\nimport {NavLink} from \"react-router-dom\";\nimport Geocode from \"react-geocode\";\n\n\n\n\n\nconst HomePage = (props) => {\n    const [city, setCity] = useState(null);\n    const [country, setCountry] = useState(null);\n    const { ref } = usePlacesWidget({\n        apiKey: 'AIzaSyARc4yC0nncVwgbkf4NpNItdfL7xnqFNJw',\n        onPlaceSelected: (place) => {\n            for (let i = 0; i < place.address_components.length; i++) {\n                for (let j = 0; j < place.address_components[i].types.length; j++) {\n                    switch (place.address_components[i].types[j]) {\n                        case \"locality\":\n                            setCity(place.address_components[i].long_name);\n                            break;\n                        case \"country\":\n                            setCountry(place.address_components[i].long_name);\n                            break;\n                    }\n                }\n            }\n        }\n    });\n    Geocode.setApiKey('AIzaSyARc4yC0nncVwgbkf4NpNItdfL7xnqFNJw');\n    const getLocation = () => {\n        navigator.geolocation.getCurrentPosition((position) => {\n            Geocode.fromLatLng(position.coords.latitude, position.coords.longitude).then(\n                (response) => {\n                    for (let i = 0; i < response.results[1].address_components.length; i++) {\n                        for (let j = 0; j < response.results[1].address_components[i].types.length; j++) {\n                            switch (response.results[1].address_components[i].types[j]) {\n                                case \"locality\":\n                                    setCity(response.results[1].address_components[i].long_name);\n                                    ref.current.value = response.results[1].address_components[i].long_name;\n                                    break;\n                                case \"country\":\n                                    setCountry(response.results[1].address_components[i].long_name);\n                                    ref.current.value += ', ' + response.results[1].address_components[i].long_name;\n                                    break;\n                            }\n                        }\n                    }\n                },\n                (error) => {\n                    console.error(error);\n                }\n            );\n        });\n\n    }\n\n\n    return(\n        <Container>\n            <Row>\n                <Col >\n                    <h1>Weather checker, created by Dmytro Boiko</h1>\n                    <div className='text-center'>\n                        <label>Location:</label>\n                        <br/>\n                        <input ref={ref} className='w-100' placeholder='Choose your city' defaultValue={city ? city + ', ' + country : ''}/>\n                        <br/>\n                        <button className='link border-animation border-0 m-3 mx-auto' style={{background: 'none'}} onClick={() => getLocation()}>Get current location</button>\n                        <NavLink className='link border-animation d-block mx-auto' style={{width: 'fit-content'}} to={'/weather/' + city + '_' + country}>Get Weather</NavLink>\n                    </div>\n                </Col>\n            </Row>\n        </Container>\n    )\n}\nexport default HomePage;","\nexport const LoadingComponent = () => {\n    return (\n        <div className=\"col-12\">\n            <span className=\"fa fa-spinner fa-pulse fa-3x fa-fw text-primary\"/>\n            <p>Loading...</p>\n        </div>\n    );\n}","import {useEffect} from \"react\";\nimport {Col, Container, Row} from \"reactstrap\";\nimport {LoadingComponent} from \"../components/LoadingComponent\";\n\nconst WeatherPage = (props) => {\n    const tmp = props.WLocation.split('_');\n    useEffect(() => {\n        if(!props.forecast.isLoading && !props.forecast.errMess && !props.forecast.forecast){\n            console.log('works');\n            if(tmp){\n                props.get_forecast(tmp[0], tmp[1]);\n            }\n        }\n    }, [])\n    if(!props.forecast.isLoading && props.forecast.forecast){\n        return(\n            <Container>\n                <Row>\n                    <Col>\n                        <h3>Right now in {tmp[0]}, {tmp[1]}</h3>\n                        <table className='w-100'>\n                            <tbody>\n                            <tr>\n                                <td>\n                                    Temperature\n                                </td>\n                                <td>\n                                    {props.forecast.forecast.current.temp_c}\n                                </td>\n                            </tr>\n                            <tr>\n                                <td>\n                                    Wind Speed\n                                </td>\n                                <td>\n                                    {props.forecast.forecast.current.wind_kph} kph\n                                </td>\n                            </tr>\n                            <tr>\n                                <td>\n                                    Weather\n                                </td>\n                                <td>\n                                    {props.forecast.forecast.current.condition.text}\n                                </td>\n                            </tr>\n                            <tr>\n                                <td>\n                                    Visibility\n                                </td>\n                                <td>\n                                    {props.forecast.forecast.current.vis_km} km\n                                </td>\n                            </tr>\n                            </tbody>\n                        </table>\n                    </Col>\n                </Row>\n                <Row>\n                    {props.forecast.forecast.forecast.forecastday.map((item, id) => {\n                        return (\n                            <Col key={id} className='forecast-day-container'>\n                                <img alt={item.date} style={{maxHeight: 50}} className='d-block mx-auto' src={item.day.condition.icon}/>\n                                Forecast on {item.date}\n                                <table className='w-100'>\n                                    <tbody>\n                                    <tr>\n                                        <td>\n                                            Max temperature:\n                                        </td>\n                                        <td>\n                                            {item.day.maxtemp_c}\n                                        </td>\n                                    </tr>\n                                    <tr>\n                                        <td>\n                                            Min temperature:\n                                        </td>\n                                        <td>\n                                            {item.day.mintemp_c}\n                                        </td>\n                                    </tr>\n                                    <tr>\n                                        <td>\n                                            Sunrise:\n                                        </td>\n                                        <td>\n                                            {item.astro.sunrise}\n                                        </td>\n                                    </tr>\n                                    <tr>\n                                        <td>\n                                            Sunset:\n                                        </td>\n                                        <td>\n                                            {item.astro.sunset}\n                                        </td>\n                                    </tr>\n                                    </tbody>\n                                </table>\n                            </Col>\n                        )\n                    })}\n                </Row>\n            </Container>\n        )\n    } else {\n        return(\n            <LoadingComponent/>\n        )\n    }\n\n}\n\nexport default WeatherPage;","export const GETTING_FORECAST = 'GETTING_FORECAST';\nexport const GET_FORECAST_ERROR = 'GET_FORECAST_ERROR';\nexport const GET_FORECAST_SUCCESS = 'GET_FORECAST_SUCCESS';","import * as ActionTypes from './ActionTypes';\nimport fetch from \"cross-fetch\";\n\nexport const get_forecast = (city, country) => (dispatch) => {\n    dispatch(getting_forecast());\n    return fetch('https://api.weatherapi.com/v1/forecast.json?key=62f8f67472244dd1942211250211705&q=' + city +',' + country + '&days=5&aqi=no&alerts=no')\n        .then(response => {\n            if(response.ok){\n                return response\n            } else {\n                let error = new Error('Error ' + response.status + ': ' + response.statusText);\n                error.response = response;\n                throw error;\n            }\n        })\n        .then(response => response.json())\n        .then(data => dispatch(get_forecast_success(data)))\n        .catch(error => dispatch(get_forecast_error(error)))\n}\nconst getting_forecast = () => ({\n    type: ActionTypes.GETTING_FORECAST\n});\n\nconst get_forecast_success = (data) => ({\n    type: ActionTypes.GET_FORECAST_SUCCESS,\n    payload: data\n})\n\nconst get_forecast_error = (err) => ({\n    type: ActionTypes.GET_FORECAST_ERROR,\n    payload: err\n})","import {Redirect, Switch, Route, withRouter} from \"react-router-dom\";\nimport HeaderComponent from \"./HeaderComponent\";\nimport HomePage from \"../pages/HomePage\";\nimport WeatherPage from \"../pages/WeatherPage\";\nimport '../style/main.scss';\nimport {connect} from \"react-redux\";\nimport {get_forecast} from \"../redux/ActionCreators\";\n\nconst mapStateToProps = state => {\n    return{\n        forecast: state.forecast\n    }\n}\n\nconst mapDispatchToProps = dispatch => ({\n    get_forecast: (city, country, setWeather) => dispatch(get_forecast(city, country, setWeather))\n})\n\nconst MainComponent = (props) => {\n    const WeatherPageWithLoc = ({match}) => {\n        return <WeatherPage get_forecast={props.get_forecast}  forecast={props.forecast} WLocation={match.params.WLocation}/>\n    }\n    return(\n        <div>\n            <HeaderComponent/>\n            <Switch>\n                <Route path='/home' component={HomePage}/>\n                <Route path='/weather/:WLocation' component={WeatherPageWithLoc}/>\n                <Redirect to='/home'/>\n            </Switch>\n        </div>\n    )\n}\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(MainComponent));","import * as ActionTypes from './ActionTypes';\n\nexport const Forecast = (state = {\n    isLoading: false,\n    errMess: false,\n    forecast: false\n}, action) => {\n    switch (action.type){\n        case ActionTypes.GETTING_FORECAST:\n            return {...state, isLoading: true, errMess: false, forecast: false};\n        case ActionTypes.GET_FORECAST_ERROR:\n            return {...state, isLoading: false, errMess: action.payload};\n        case ActionTypes.GET_FORECAST_SUCCESS:\n            return {...state, isLoading: false, errMess: false, forecast: action.payload};\n        default: return state\n    }\n}","import {BrowserRouter} from \"react-router-dom\";\nimport MainComponent from \"./components/MainComponent\";\nimport {ConfigureStore} from \"./redux/configureStore\";\nimport {Provider} from 'react-redux';\n\nconst store = ConfigureStore();\n\nfunction App() {\n  return (\n      <Provider store={store}>\n          <BrowserRouter>\n              <MainComponent/>\n          </BrowserRouter>\n      </Provider>\n  );\n}\n\nexport default App;\n","import {createStore, combineReducers, applyMiddleware} from \"redux\";\nimport thunk from \"redux-thunk\";\nimport logger from 'redux-logger';\nimport {Forecast} from \"./Forecast\";\n\nexport const ConfigureStore = () => {\n    return createStore(combineReducers({\n        forecast: Forecast\n    }), applyMiddleware(thunk))\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}